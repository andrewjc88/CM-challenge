{"version":3,"sources":["TopNav/SelectionBar/SelectionBar.js","TopNav/TopNav.js","App.js","index.js"],"names":["SelectionBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","updateBarPosition","window","addEventListener","_this3","removeEventListener","prevProps","selectedCity","selectedElm","document","getElementById","concat","selectedNavData","getBoundingClientRect","setState","barLeft","left","width","forceUpdate","_this$state","react_default","a","createElement","className","style","Component","TopNav","setselectedCity","idx","selectedCityIdx","cities","navData","map","city","key","section","id","onClick","label","TopNav_SelectionBar_SelectionBar","App","src_TopNav_TopNav","ReactDOM","render","src_App"],"mappings":"2kBAsDeA,qBAlDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,mFAKC,IAAAQ,EAAAL,KAClBA,KAAKM,oBACLC,OAAOC,iBAAiB,SAAU,kBAAMH,EAAKC,qEAGxB,IAAAG,EAAAT,KACrBO,OAAOG,oBAAoB,SAAU,kBAAMD,EAAKH,iEAG/BK,GACbX,KAAKJ,MAAMgB,eAAiBD,EAAUC,cACxCZ,KAAKM,gEAIW,IACVM,EAAiBZ,KAAKJ,MAAtBgB,aACFC,EAAcC,SAASC,eAAT,WAAAC,OAAmCJ,IACvD,GAAIC,EAAa,CACf,IAAMI,EAAkBJ,EAAYK,wBACpClB,KAAKmB,SAAS,CACZC,QAASH,EAAgBI,KACzBC,MAAOL,EAAgBK,aAGzBtB,KAAKuB,+CAIA,IAAAC,EACoBxB,KAAKI,MAAxBgB,EADDI,EACCJ,QAASE,EADVE,EACUF,MACjB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,WACVC,MAAO,CACLR,KAAA,QAAAL,OAAgBI,EAAhB,gBACAE,MAAA,QAAAN,OAAiBM,EAAjB,2BA3CeQ,qBCwCZC,qBArCb,SAAAA,EAAYnC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACjBlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,KAMRoC,gBAAkB,SAACC,GACjBpC,EAAKsB,SAAS,CAAEe,gBAAiBD,KANjCpC,EAAKO,MAAQ,CACX8B,gBAAiB,GAHFrC,wEAWV,IAAAQ,EAAAL,KACCkC,EAAoBlC,KAAKI,MAAzB8B,gBACAC,EAAWC,IAEnB,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACXO,EAAOE,IAAI,SAACC,EAAML,GACjB,OACER,EAAAC,EAAAC,cAAA,MACEY,IAAKD,EAAKE,QACVC,GAAE,WAAAzB,OAAasB,EAAKE,SACpBZ,UAAS,YAAAZ,OAAciB,IAAQC,GAAmB,mBAClDQ,QAAS,kBAAMrC,EAAK2B,gBAAgBC,KAEnCK,EAAKK,UAKdlB,EAAAC,EAAAC,cAACiB,EAAD,CAAchC,aAAcuB,EAAOD,GAAiBM,kBAhCvCV,oBCONe,MARf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmB,EAAD,QCFNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASnC,SAASC,eAAe","file":"static/js/main.fa5610ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SelectionBar.css';\n\nclass SelectionBar extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  componentDidMount() {\n    this.updateBarPosition();\n    window.addEventListener(\"resize\", () => this.updateBarPosition());\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", () => this.updateBarPosition());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedCity !== prevProps.selectedCity) {\n      this.updateBarPosition();\n    }\n  }\n\n  updateBarPosition() {\n    const { selectedCity } = this.props;\n    const selectedElm = document.getElementById(`nav-itm-${selectedCity}`);\n    if (selectedElm) {\n      const selectedNavData = selectedElm.getBoundingClientRect();\n      this.setState({\n        barLeft: selectedNavData.left,\n        width: selectedNavData.width\n      })\n    } else {\n      this.forceUpdate()\n    }\n  }\n\n  render() {\n    const { barLeft, width } = this.state;\n    return (\n      <div className=\"selection-bar\">\n        <div \n          className=\"selector\"\n          style={{\n            \"left\": `calc(${barLeft}px - 2.2rem)`,\n            \"width\": `calc(${width}px - 1.8rem)`\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SelectionBar;","import React, { Component } from 'react';\nimport SelectionBar from './SelectionBar/SelectionBar';\nimport * as navData from './navigation.json';\nimport './TopNav.css';\n\nclass TopNav extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedCityIdx: 0,\n    }\n  }\n\n  setselectedCity = (idx) => {\n    this.setState({ selectedCityIdx: idx });\n  }\n\n  render() {\n    const { selectedCityIdx } = this.state;\n    const { cities } = navData;\n\n    return (\n      <div>\n        <ul className=\"top-nav\" >\n          {cities.map((city, idx) => {\n            return (\n              <li\n                key={city.section}\n                id={`nav-itm-${city.section}`}\n                className={`nav-item ${idx === selectedCityIdx && \"nav-item-active\"}`}\n                onClick={() => this.setselectedCity(idx)}\n              >\n                {city.label}\n              </li>\n            )\n          })}\n        </ul>\n        <SelectionBar selectedCity={cities[selectedCityIdx].section} />\n      </div>\n    )\n  }\n}\n\nexport default TopNav;\n","import React from 'react';\nimport TopNav from './TopNav/TopNav';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopNav />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}